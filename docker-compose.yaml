version: '3'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    hostname: schema-registry
    depends_on:
      - kafka-broker-1
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'
      SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8081
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka-broker-1:9092,PLAINTEXT_INTERNAL://localhost:19092
      SCHEMA_REGISTRY_DEBUG: 'true'

  kafka-broker-1:
    image: confluentinc/cp-kafka:latest
    hostname: kafka-broker-1
    ports:
      - "19092:19092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker-1:9092,PLAINTEXT_INTERNAL://localhost:19092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1

  ksqldb-server:
    build: ksqldb-server
    hostname: ksqldb-server
    container_name: ksqldb-server
    depends_on:
      - kafka-broker-1
    ports:
      - "8088:8088"
      - "1099:1099"
      - "7072:7072"
    environment:
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_BOOTSTRAP_SERVERS: kafka-broker-1:9092
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
      KSQL_KSQL_SCHEMA_REGISTRY_URL:  "http://schema-registry:8081"
      KSQL_JMX_OPTS: >
        -Djava.rmi.server.hostname=localhost
        -Dcom.sun.management.jmxremote
        -Dcom.sun.management.jmxremote.port=1099
        -Dcom.sun.management.jmxremote.authenticate=false
        -Dcom.sun.management.jmxremote.ssl=false
        -Dcom.sun.management.jmxremote.rmi.port=1099

  ksqldb-cli:
    build: ksqldb-cli
    container_name: ksqldb-cli
    depends_on:
      - kafka-broker-1
      - ksqldb-server
    environment:
      KAFKA_BOOTSTRAP_SERVER: kafka-broker-1:9092
      TOPIC_NAME: "page_views"
    entrypoint: ["/scripts/wait-for-ksql-server.sh"]
    tty: true
  
  producer:
    build: producer
    container_name: producer
    depends_on:
      kafka-broker-1:
        condition: service_started
      ksqldb-server:
        condition: service_started
      schema-registry:
        condition: service_started
      rt-simulator:
          condition: service_healthy

    environment:
      KAFKA_BOOTSTRAP_SERVER: kafka-broker-1:9092
      KAFKA_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      SCHEMA_FILE_LOCATION: /app/schema/pageviews.avsc
      PRODUCER_MAX_SLEEP_TIME_SECONDS: 5

  consumer-1:
    build: consumer-1
    container_name: consumer-1
    depends_on:
      - kafka-broker-1
      - ksqldb-server
      - schema-registry
    environment:
      KAFKA_BOOTSTRAP_SERVER: kafka-broker-1:9092
      KAFKA_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      KAFKA_TOPIC: "PAGE_VIEWS_COUNT"
      AWS_REGION: "eu-west-2"
      AWS_ACCESS_KEY: ""
      AWS_SECRET_KEY: ""
      S3_BUCKET_NAME: "agg_event_page_views"

  consumer-2:
    build: consumer-2
    container_name: consumer-2
    depends_on:
      - kafka-broker-1
      - ksqldb-server
      - schema-registry
    environment:
      KAFKA_BOOTSTRAP_SERVER: kafka-broker-1:9092
      KAFKA_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      KAFKA_TOPIC: "page_views"
      AWS_REGION: "eu-west-2"
      AWS_ACCESS_KEY: ""
      AWS_SECRET_KEY: ""
      S3_BUCKET_NAME: "raw_page_view_event"

  rt-simulator:
    build: rt-simulator
    environment:
      PRODUCER_MAX_SLEEP_TIME_SECONDS: 5
      TOTAL_EVENTS_TO_GENERATE: 10000
    expose:
        - "5678"
        - "5679"
    healthcheck:
      test: ["CMD-SHELL", "python3 src/healthcheck.py"]
      interval: 5s
      timeout: 10s
      retries: 5
    entrypoint: ["python3", "src/event_ws_server.py"]

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin # Change this in production
    volumes:
      - grafana-data:/var/lib/grafana

  node_exporter:
    image: prom/node-exporter:latest
    ports:
      - "9100:9100"

volumes:
  grafana-data: